#!/bin/sh
#
#-------------------------------------------------------------------------
#
# Copyright 2014 Alex Blount
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-------------------------------------------------------------------------
#
# -SHAKE-
#
# shell scripts as makefiles
# tested using dash, bash, and posh
#
# shake relies on these 'global' variables
#   task                the current task, this is passed to the Shakefile
#   __is_shake_target   'true' if the current task was supplied to shake as a argument
#
# shake provides these functions to Shakefiles:
#   run                 Print a command, run it, and check it's return status.
#   runq                Same as run, but quiet.
#   depends_on          Runs the listed tasks as dependencies.

set -o errexit
set -o nounset

__main() {
    # $@ - A list of tasks to run.

    # Make sure there's a readable Shakefile
    if [ ! -r ./Shakefile ]; then
        __check_status 1 "Couldn't find or read Shakefile."
        exit 1
    fi

    args=$@
    if [ $# -eq 0 ]; then
        # No arguments were given to shake.
        # Run the default, 'all'.
        args="all"
    fi

    # Run each target separately.
    for target in $args; do
        __is_shake_target=true
        task=$target
        . ./Shakefile
        __check_status $? "$target"
    done
}

# used to run a task's dependencies
# accepts task names as arguments
depends_on() {
    # $@ - A list of tasks to be run/checked as dependencies

    # first we need to run the dependencies
    for dep in $@; do
        # only the task given to the shake command is the target
        (__is_shake_target=
         task=$dep
         . ./Shakefile
         __check_status $? "$dep")
    done

    # Check to see if we can skip this task.
    # We can only skip a task if:
    #    - it is NOT the target
    #    - it generates a file
    #    - that file already exists
    #    - that file is newer than all its dependencies
    if [ "$__is_shake_target" != 'true' -a -f "$task" ] \
            && __is_newest "$task" $@; then
        exit 0
    fi
}

# echo the command to be run
# eval it
# and make sure it didn't screw up
run() {
    # $@ - a complete command
    echo [$task] $@
    runq $@
}

# Run a command silently
# fail it it fails
runq() {
    # $@ - A complete command
    eval $@
    __check_status $? "$@"
}

# check that a command's exit status
# if it isn't 0, display an error message
# and exit with that status.
__check_status() {
    # $1 - status code
    # $2 - the command
    if [ "$1" != 0 ]; then
        echo '/!\ ERROR /!\' [$task] \"$2\" failed. \(exit code $1\)
        exit "$1"
    fi
}

# given a list of file names, print the newest one
# ignore non-existent or unreadable files
__newest() {
    # $@ - A list of files
    ls -t1 $@ 2> /dev/null | head -n 1
}

# check if the first file listed is newer than the rest
# note: anything is 'newer' than a file that doesn't exist
__is_newest() {
    # $@ - A list of files
    # $1 - The file to check
    [ "$1" = "$(__newest $@)" ]
}

__main $@
